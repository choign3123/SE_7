<손승현>
어려웠던점
코딩? 프레임워크? 알아가기

배웠던점
프로젝트 진행 과정
프로젝트 설계법의 중요성(다이어그램, 요구사항 명세서)
협업의 중요성

<이현제>
배웠던 점
협업 툴에 대한 이해 // 깃헙, 노션
설계에 있어서 다방면의 시각으로 인해 설계 구멍들을 빠르게 보완할 수 있었다.
앱 개발에 대한 기초적인 이해도가 생겨 다음 설계 때 이번 팀 미팅 때 헤맸던 시간을 줄일 수 있다.
실제 개발에 들어가지 않아도 ovenapp 등으로 최소한의 화면을 쉽게 볼 수 있다.
프론트/백 구조의 개발방식을 경험했다.
C나 Java 등 비교적 연차가 있는 언어만을 사용하다 최신언어를 사용해 편리함을 느꼈다. // lateinit , by lazy, retrofit, glide 등 그외 다양한 라이브러리 클래스와 메소드 유스케이스 다이어그램, 클래스/시퀀스 다이어그램 등을 사용하며 절차적인 설계를 경험했다. 
프론트 팀장으로서의 첫 개발을 경험했다.

어려웠던 점
팀원 간 적절한 시간에 적절한 양으로 소통을 하지 못했다.
앱 프로젝트 개발에 있어서 모듈 별로 나눠 개발하지 못했으며 개발 경과를 확인함에 있어 연락이 되지 않아 적절한 협업을 하지 못했다.
프론트 팀장으로서 팀원들을 적절히 이끌지 못했다. // 소통을 하지 못했고, 개발 경과를 확인하지 못했고 따라 적절하게 모듈개발을 할당하지 못했다. 
개발에 대한 이해도가 부족해 첫 미팅 3번 총 6시간 이상을 투자했음에도 갈피를 못 잡아 적절한 결과를 도출해내지 못했다. // 첫 회의 때는 기본적인 앱 기능에 대해 그림을 이용해~
클래스 다이어그램 설계에 있어 언어에 대한 충분한 공부와 설계에 대한 이해가 없어 첫 설계 때 적절히 설계해내지 못했다.
개발 경험이 없어서 개발을 하며 요구사항을 수정하거나 클래스/시퀀스 다이어그램 등을 수정하는 작업이 잦았다.
충분한 시간이 있었으나 공부를 게을리하여 전체적인 일정이 지연되었으며 설계에 큰 어려움을 그리고 개발 중에도 성능과 같은 면에 대해 고려해보는 여유없이 기능 구현에만 급급하였다.
일정이 미뤄지다보니 적절히 협업 툴을 사용하지 못했다. // 노션은 그저 회의록이 전락했으며 깃헙에서는 브런치 등을 사용하지 못했고 단순히 커밋하며 변경하였고 그 마저도 팀원들의 파일을 팀장이 로컬에서 통합하는 방식으로 진행하기도 하였다.
프론트 팀원 간 언어와 개발에 대한 이해도를 공유하지 못했으며 이로 인해 팀장이 적절히 분업을 지시하지 못했다.


ToDo
깃헙에서 브런치 사용, 이슈 사용, 코멘트 사용 <<< 전부 구두로 해결하거나 팀장끼리만 공유함
노션에서 모듈에 대한 정보 공유, 일정 게시, 최근 이슈에 대한 게시
팀원들에게 적절한 모듈 할당
팀원 간 연락 시간 설정
이슈에 대해 유의미한 대화를 나눠서 해결하고 이를 문서화

<조성주>
<진행과정에서 어려웠던 점> 

- 앱 만드는 것이 처음이라 처음부터 새로운 언어를 공부하면서 구현도 해야되서 개인적으로 어려웠다
- 깃허브 사용법이 미숙하다 보니 협업하는 것이 개인적으로 어려웠다

<진행과정에서 배웠던 점>

- 프로젝트가 전반적으로 어떻게 흘러가는지 배우게 되었다

<최가나>
배웠던 점
공통)
-노션, 깃허브 쓰는 법
-코틀린, 스프링
-회의하는 법?

아쉬웠던 점
-이미지 로컬저장으로 구현된 점. 이거는 시간 좀 더 있으면 할 수 있을 것 같은데.
-처음 생각했던 것에 비해 구현이 따라가지 못해 유스케이스 줄여갈 때.

어려웠던 점
-처음에 요구사항 명세서 쓰고 그럴 때 의견 엇갈리는 게 많았어서. 시간도 많이 소요되고, 진도는 더디고.
그래서 나중에 시퀀스 다이어그램 그릴 땐 같이 그리는 게 아니라 한명이 대략적으로 짜오면 다른 한명이 보고
수정해서 수정된 부분만 서로 얘기하는 식으로 해감.
-코드 짜면서 처음 했던 설계를 바꾸고 싶은데, 그게 생각만큼 잘 안됐던거. 거의 클래스 합치거나 새로 만들거나 하는
정도였는데, 그러다보니 시퀀스 다이어그램 바꿀거 생각하면 벌써부터 지쳐서. 바꿀 수 있는건 바꿨는데
규모 크게 움직여야하는건 바꾸지 못했던 점.

<임규섭>
어려웠던 점
부족한 코딩 지식 기반, 클래스 다이어그램과 시퀀스 다이어그래의 복잡함.

배웠던 점
실제로 프로그램이 만들어지는 과정, 프로그래머가 고객과 소통해야 하는 이유, 
안드로이드 어플의 구조와 동작 원리, 프로그램 개발의 적절한 비용, 
프로젝트의 마감 기한과 시간 관리의 중요성