프론트의 전체적인 클래스 구조를 보겠습니다.
먼저 옷이나 사용자 정보 등 앱에서 다루는 데이터들을 대부분 백과의 통신에서 받아오고 지우고 수정하기때문에 이에 대한 통신 인터페이스 retrofit이 있습니다.
그리고 앱 시작 시 나오는 loginActivity
로그인을 할 아이디가 없다면 이를 만들 수 있는 signupActivity

로그인 이후 사용자의 옷장을 보여줄 closetAct
옷장에서 옷을 클릭 시 이에 대한 정보를 보여줄 clothAct
해당 정보를 수정할 시 보여지는 modifyAct
그리고 옷에 대한 데이터를 이용해 검색할 수 있는 searchAct
해당 결과를 보여주는 searchResultAct
즐겨찾기된 옷을 보여주는 bookmarkAct
마지막으로 mypageAct가 있습니다.

클래스에 Actvitiy가 붙지 않은 것들은 데이터 클래스로 해당 화면에서 통신 시 필요한 데이터 클래스들입니다.

구석에 있는 AllClothResult 와 ListAdapterGrid는
AllClothResult는 closetAct, bookmarkAct, SearchResultAct에서 통신 결과값으로 똑같기에 하나로 통일했고
ListAdapterGrid는 옷장을 그리드뷰로 표현하기 위한 클래스로 이 역시 위 3개의 act와 동일하므로 하나로 통일했습니다.


먼저 retrofit 인터페이스를 보면
이 인터페이스는 백, 서버와의 통신을 위한 인터페이스로
코틀린 내부 라이브러리 레트로핏을 이용했고 여러 액티비티에서 이용될 것으로 생각해 싱글톤 패턴으로 설계하였습니다. // 뺄까요
변수로 서버의 base url
그리고 서버 간 통신 시 json형식으로 통신하는데 이를 위해 gson 라이브러리를 사용하였습니다.
통신 함수들은
회원가입 시 회원가입 정보를 post해주는 함수
로그인 정보 post함수
마이페이지에서 사용자 정보를 get해줄 함수
사용자의 옷을 post해줄 함수
사용자의 등록된 전체 옷을 get해줄 함수
사용자의 단일 옷을 클릭 했을 때 이를 get해줄 함수
사용자의 즐겨찾기된 옷을 get해줄 함수
옷을 삭제해줄 delete함수
옷을 변경해줄 patch함수 (modifycloth)
특정 조건에 따라 옷을 검색해줄 get함수입니다.
이 때 조건이 필요한 함수들은 조건을 인자로 받아 query하였습니다.



loginAct를 보면 로그인을 위해 id pw 를 변수로 받고 이를 loginInfo라는 하나의 클래스로 만들어 하나로 취급했습니다.
밑의 메소드는 
자동 로그인을 위한 autoLogin, 로그인을 위한 login이 있고
둘 다 인자로 loginInfo를 받습니다. 
autoLogin의 경우 AppData 클래스에서 코틀린 라이브러리의 SharedPreferences 클래스를 이용해 앱 내부에 실행 종료와 관계없이 저장하게끔 설계했습니다.
bindinFun은 사용자가 입력한 id와 pw를 LoginAct 내부의 id,pw와 바인딩하는 것이고 clearUI는 사용자가 로그인 버튼을 누르거나 회원가입 버튼을 눌렀을 때 id pw 입력 칸을 초기화 시켜주는 메소드입니다.
왼 쪽에 두 데이터 클래스는 통신 시 받는 json 데이터를 데이터 클래스로서 받게끔 설계했습니다.

signupAct는 loginAct와 구조가 비슷하며 사용자에게 id,pw,pwChk,name을 받고 이를 signupData 하나로 만들어 이를 이용해
서버와 통신하여 계정을 생성합니다.

closetAct는 로그인 이후 바로 진입하는 화면으로 사용자의 전체 옷을 보여줍니다.
이 화면에서 카메라나 갤러리를 이용해 옷을 등록할 수 있고 하단에 버튼들을 터치 해 버튼에 해당되는 화면으로 이동할 수 있습니다.
변수로는 옷 사진을 저장해줄 변수 photoUri
서버에서 유저를 구분하기 위한 userIdx
옷에 대한 정보 clothInfo가 있습니다.
메소드로는
카메라 실행과 갤러리 실행을 위한 launcer들
카메라 실행 시 카메라 권한과 갤러리 접근 시 이를 위한 접근 권한 메소드 permission
저희 앱의 홈 화면이기도 하기에 뒤로 가기 버튼을 2번 눌러야 종료할 수 있도록 하는 onBackPressed
전체 옷을 보여줄 getAllCloth
하단에 버튼들을 터치 시 화면 이동을 해주는 bottonBar

bookmarkAct는 getBookmark 메소드를 통해 즐겨찾기된 옷만 가져오는 통신을 하고

SearchAct에서 사용자가 화면에 있는 계절과 카테고리를 선택하면 이를 변수로서 바인딩하고
SearchResultAct에서 해당 값을 받아들여 searchClothResult 메소드를 통해 해당 조건으로 서버와 통신합니다. 

앞서 말씀드린 closet, bookmark, searchresult에서 반환받는 데이터가 같으므로 같은 allclothResult를 사용하고 옷에 대한 출력 역시 같은 그리드뷰를 사용함으로 ListAdapterGrid 클래스를 사용합니다.
ListAdapterGrid의 경우 변수로서 어느 액티비티인지 알려주는 context useridx 그리고 전체 옷에 대한 배열을 가지고 있고
메소드로는 해당 옷에 대해 그리드뷰를 만들어주는 createViewHolder 그리고 해당 그리드뷰에 바인딩해주는 bindviewHolder 이 때 인자로 gridadter를 그리고 출력할 옷의 배열인덱스를 position으로 받습니다.
getitemCount는 ListAdapterGrid가 받은 list가 몇 개인지에 대한 메소드입니다.

개별 옷을 클릭했을  때 나오는 화면은 clothAct로 홈 화면 또는 특정 화면에서 옷을 클릭했을 때 해당 옷의 clothIdx를 전달받습니다. 따라서 clothAct는 시작과 동시에 clothIdx를 받게 되고 이를 이용해 getCloth 메소드를 통해 서버에서 해당 옷에 대한 정보를 받아오고 이를 cloth: ClothInfo에 저장합니다.
해당 화면에서는 옷에 대한 수정과 삭제를 할 수 있으며
수정은 단순히 버튼을 누르면 수정화면 modifyAct로 넘어가도록 설계하였고 삭제는 버튼을 누르면 deleteCloth를 이용해 서버와 통신하여 옷을 서버에서 삭제하도록 하였습니다.

modifyAct는 카메라/갤러리에서 옷을 등록하는 경우와 개별 옷 터치 후 수정화면 진입 시에 실행됩니다.
변수로서 옷에 대한 정보를 받고
메소드 역시 두 경우에 따라서 분리해서 설계했습니다.
