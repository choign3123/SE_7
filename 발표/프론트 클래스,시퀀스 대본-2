프론트 쪽의 클래스 다이어그램입니다.
기본 구조는 
백과의 통신을 통해 데이터를 다루는 레트로핏 인터페이스, 
해당 데이터를 화면에 표시하는 액티비티들
그리고 해당 데이터를 통신에서 사용될 형식으로 담아줄 데이터 클래스
의 구조입니다.


먼저 레트로핏 인터페이스는 
통신에 사용될 기본 base url을 변수로 설정해주고
요구사항 기능에 따른 통신 메소드들을 설계했습니다.
해당 메소드들은 액티비티를 보며 설명하도록 하겠습니다.


앱 처음 실행 시 로그인 화면 액티비티가 실행됩니다. 이 때 사용자에게 id pw를 받고 이를 loginInfo라는 하나의 데이터 클래스로 만들고 이후 로그인을 합니다. 레트로핏 인터페이스에서 postSignUpInfo에 해당되는 메소드로 login메소드가 있고
자동 로그인 기능을 위해 autoLogin메소드가 있습니다. 자동 로그인 기능을 위해서는 코틀린 라이브러리의 sharedPreferences를 사용했으며 AppData 데이터클래스에서 이를 볼 수 있습니다.
왼 쪽의 loginResult는 통신 데이터를 담아줄 데이터 클래스로 login메소드에서 레트로핏 통신 시 이를 이용해 데이터를 주고받습니다.


signUpActivity는 회원가입 화면으로 로그인 화면과 비슷한 구조입니다. 변수로서 사용자 정보들을 받고 이를 이용해 레트로핏 통신을 하는 signUp메소드가 있습니다.


로그인 이후에는 바로 옷장화면 ClosetActivity로 진입합니다. 저희 앱의 홈화면이기도한 ClosetActivity는 뒤로가기 시 바로 종료되지 않고 2번 이상 뒤로가기를 해야 종료되게끔 설계하였습니다. 해당 화면에서는 카메라/갤러리를 통해 옷장에 옷을 추가할 수 있고 이러한 추가된 옷을 한번에 화면에 보여줍니다. 
또한 하단에는 홈화면/검색화면/즐겨찾기화면/마이페이지 화면에 해당하는 버튼을 두어 터치 시 해당 화면으로 이동하게끔 설계하였습니다. 
메소드를 보시면 카메라/갤러리에 접근하는 기능을 담은 launcher
카메라/갤러리에 접근 권한을 확인하는 permission
2번 이상 뒤로가기 시 종료하는 onBackPressed
모든 옷을 보여주는 getAllCloth
그리고 하단 버튼들을 통해 다른 화면으로 이동하게끔 하는 bottomBar 메소드가 있습니다.

다음으로 BookmarkActivity는 즐겨찾기된 옷만 보여주는 화면으로 getBookmark를 통해 레트로핏 통신을 합니다.

검색화면은 searchActivity 화면에서 검색 조건을 사용자에게 받고 이 조건을 통해 searchResultActivity에서 searhClothResult 메소드를 통해 레트로핏 통신을 합니다. 

말씀 드린 ClosetActivity, BookmarkActivity, SearchResultActivity는 레트로핏 통신을 통해 여러 옷을 출력합니다. 따라서 통신결과값으로 데이터 클래스가 같아 AllClothResult로 데이터 클래스를 통일했고 여러 옷을 출력하는데에 있어 그 방식이 같아 ListAdapterGrid를 동일하게 사용하게 옷장을 표현했습니다.
(ListAdapterGrid는 여러 옷을 사용자에게 보여주는데 있어 사용한 리사이클러뷰의 커스텀 어댑터로 이를 이용해 AllClothResult로 받은 옷들을 그리드뷰로 표현합니다.)

다시 홈 화면으로 돌아와서 
옷장에서 개별 옷을 터치 시 해당 옷에 대한 정보를 보여주는데 이것이 바로 ClothActivity입니다. 이 화면에서 터치한 옷에 대해 getCloth메소드를 통해 레트로핏 통신을 하고 해당 화면에서 옷 삭제도 가능하게 설계를 하여 deleteCloth메소드를 통해 서버에서 옷을 삭제할 수 있습니다.

오른쪽을 보시면 modifyActivity가 있는데 이는 옷 수정화면으로 옷 수정화면은 옷을 홈 화면에서 카메라/갤러리를 통해 처음 등록하는 경우와 clothActivity에서 수정을 하는 경우로 나눌 수 있습니다.
각각의 경우에 따라 옷을 등록하는 경우 postCloth메소드로 서버에 옷을 등록하고
수정하는 경우 modifyCloth메소드로 서버에 옷을 수정합니다. 

마지막으로 마이페이지 화면이 있는데 이는 getUserInfo메소드를 통해 서버에서 사용자 정보를 불러오고 이를 출력합니다. 그리고 해당 화면에서 로그아웃 기능이 있어 logOut메소드를 통해 해당 계정에서 로그아웃합니다.

---------------------------------------------------------------------

시퀸스 다이어그램은 수가 너무 많아 홈화면에서 카메라를 실행해 옷 사진을 찍고 이를 옷장에 등록한 후 옷 정보를 조회하고 옷 정보를 수정하는 경우의 시퀸스 다이어그램을 보겠습니다.

카메라를 실행해 옷 사진을 찍기 위해 카메라로 찍어 옷 사진을 가져온다 시퀸스 다이어그램을 보겠습니다.
먼저 사용자가 홈화면에서 카메라 버튼을 터치합니다. 그러면 홈화면, ClosetActivity의 camerapermission메소드가 실행되어 권한을 확인합니다. 이 때 권한 없다면 권한 설정을 요구하고 권한이 있다면 cameraLancher를 통해 카메라를 실행합니다. 권한을 거부하는 경우는 사용자에게 "카메라 권한을 승인해야 카메라를 사용할 수 있습니다." 메세지를 보여줍니다.
우리는 권한 허용을 하고 카메라를 실행하겠습니다.

카메라 실행 이후 적절한 사진을 찍고 카메라 화면에서 나온다면 바로 ClosetModify에 진입합니다. 해당하는 시퀸스 다이어그램은 옷 정보를 등록한다로 사용자가 옷 정보를 버튼을 눌러 설정하고 완료 버튼을 누른다면 postCloth메소드가 실행되며 서버에 옷이 등록됩니다. 메소드 즉 레트로핏 통신이 성공적으로 진행된 경우 onResponse를 통해 사용자 입력값과 옷 정보가 서버에 저장이 되고 옷 등록 완료!!! 문구를 메세지로 띄워주고 홈화면으로 이동합니다. 통신이 실패한 경우 onFailure을 통해 옷 등록 실패.. 문구를 출력합니다.

우리 옷은 통신이 성공적으로 진행되어 서버에 저장이 된 경우로 가정하겠습니다.
그렇다면 홈 화면에서 해당 옷을 클릭하여 옷 정보를 볼 수 있는데 이는 옷 정보를 조회한다 시퀸스 다이어그램입니다. 시작하면서 getCloth메소드를 통해 옷 정보를 서버에서 불러오고 위와 마찬가지로 통신 성공 실패에 따른 메소드가 있습니다. 통신 성공 시 옷 정보가 출력되고 여기서 수정 버튼을 누른다면 modifyActivity로 이동하고 삭제 버튼을 누른다면 deleteCloth메소드를 통해 옷 정보를 서버에서 삭제합니다.

우리는 수정 버튼을 누른다고 가정하겠습니다.

수정 버튼을 누른 경우 옷 정보를 수정한다 시퀸스 다이어그램에 해당되며 사용자가 임의로 옷 정보 수정 이후 완료 버튼을 누르면 해당 정보를 modifyCloth메소드를 통해 서버에 저장합니다. 역시 위와 마찬가지로 통신 성공 실패에 따른 메소드가 존재합니다.
성공 시 서버에서 옷 정보를 수정하고 
화면은 수정 화면의 전 화면인 옷 정보 조회화면으로 돌아가고 옷 정보를 조회한다 시퀸스 다이어그램이 해당됩니다. 아까 설명드렸듯이 getCloth메소드를 통해 옷 정보를 서버에서 불러오는데 전에 옷 정보를 수정하였고 이것이 서버에 저장되었으니 수정된 옷 정보를 서버에서 불러오고 이를 출력합니다.

여기까지 홈화면에서 카메라를 실행해 옷 사진을 찍고 이를 옷장에 등록한 후 옷 정보를 조회하고 옷 정보를 수정하는 경우의 시퀸스 다이어그램이였습니다.